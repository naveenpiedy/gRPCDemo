# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import movies_management_pb2 as movies__management__pb2

GRPC_GENERATED_VERSION = '1.64.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in movies_management_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class MoviesServiceStub(object):
    """Defines the MoviesService with various RPC methods for movie management
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetMovie = channel.unary_unary(
                '/movies_management.MoviesService/GetMovie',
                request_serializer=movies__management__pb2.GetMovieRequest.SerializeToString,
                response_deserializer=movies__management__pb2.MovieResponse.FromString,
                _registered_method=True)
        self.GetActor = channel.unary_unary(
                '/movies_management.MoviesService/GetActor',
                request_serializer=movies__management__pb2.GetActorRequest.SerializeToString,
                response_deserializer=movies__management__pb2.ActorResponse.FromString,
                _registered_method=True)
        self.AddMovie = channel.unary_unary(
                '/movies_management.MoviesService/AddMovie',
                request_serializer=movies__management__pb2.AddMovieRequest.SerializeToString,
                response_deserializer=movies__management__pb2.AddMovieResponse.FromString,
                _registered_method=True)
        self.ChangeRating = channel.unary_unary(
                '/movies_management.MoviesService/ChangeRating',
                request_serializer=movies__management__pb2.ScoreRequest.SerializeToString,
                response_deserializer=movies__management__pb2.ScoreResponse.FromString,
                _registered_method=True)
        self.GetMoviesByDirector = channel.unary_stream(
                '/movies_management.MoviesService/GetMoviesByDirector',
                request_serializer=movies__management__pb2.GetMoviesByDirectorRequest.SerializeToString,
                response_deserializer=movies__management__pb2.MovieResponse.FromString,
                _registered_method=True)


class MoviesServiceServicer(object):
    """Defines the MoviesService with various RPC methods for movie management
    """

    def GetMovie(self, request, context):
        """Retrieves a movie by its name
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetActor(self, request, context):
        """Retrieves an actor by their ID or name
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddMovie(self, request, context):
        """Adds a new movie and returns the details of the added movie
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChangeRating(self, request, context):
        """Changes the rating of a movie and returns the updated rating
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMoviesByDirector(self, request, context):
        """Get Movies by who directed a movie and stream the response
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MoviesServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetMovie': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMovie,
                    request_deserializer=movies__management__pb2.GetMovieRequest.FromString,
                    response_serializer=movies__management__pb2.MovieResponse.SerializeToString,
            ),
            'GetActor': grpc.unary_unary_rpc_method_handler(
                    servicer.GetActor,
                    request_deserializer=movies__management__pb2.GetActorRequest.FromString,
                    response_serializer=movies__management__pb2.ActorResponse.SerializeToString,
            ),
            'AddMovie': grpc.unary_unary_rpc_method_handler(
                    servicer.AddMovie,
                    request_deserializer=movies__management__pb2.AddMovieRequest.FromString,
                    response_serializer=movies__management__pb2.AddMovieResponse.SerializeToString,
            ),
            'ChangeRating': grpc.unary_unary_rpc_method_handler(
                    servicer.ChangeRating,
                    request_deserializer=movies__management__pb2.ScoreRequest.FromString,
                    response_serializer=movies__management__pb2.ScoreResponse.SerializeToString,
            ),
            'GetMoviesByDirector': grpc.unary_stream_rpc_method_handler(
                    servicer.GetMoviesByDirector,
                    request_deserializer=movies__management__pb2.GetMoviesByDirectorRequest.FromString,
                    response_serializer=movies__management__pb2.MovieResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'movies_management.MoviesService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('movies_management.MoviesService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MoviesService(object):
    """Defines the MoviesService with various RPC methods for movie management
    """

    @staticmethod
    def GetMovie(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/movies_management.MoviesService/GetMovie',
            movies__management__pb2.GetMovieRequest.SerializeToString,
            movies__management__pb2.MovieResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetActor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/movies_management.MoviesService/GetActor',
            movies__management__pb2.GetActorRequest.SerializeToString,
            movies__management__pb2.ActorResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddMovie(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/movies_management.MoviesService/AddMovie',
            movies__management__pb2.AddMovieRequest.SerializeToString,
            movies__management__pb2.AddMovieResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ChangeRating(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/movies_management.MoviesService/ChangeRating',
            movies__management__pb2.ScoreRequest.SerializeToString,
            movies__management__pb2.ScoreResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMoviesByDirector(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/movies_management.MoviesService/GetMoviesByDirector',
            movies__management__pb2.GetMoviesByDirectorRequest.SerializeToString,
            movies__management__pb2.MovieResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
